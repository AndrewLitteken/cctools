#!/bin/sh
#This script can help repeat one program within a package.
package_path=""
mountlist=""
show_help()
{
	echo "Usage: chroot_package_run --package-path path-of-package [--shell your-shell] [command]"
	echo "If --shell is set, the following command will be ignored. One shell with / as the current directory will be returned."
	echo "Example 1: chroot_package_run --package-path /tmp/pack --shell /bin/bash"
	echo "If --shell is not set, and no command is given, run /bin/sh and return the prompt with / as the current directory."
	echo "Example 2: chroot_package_run --package-path /tmp/pack"
	echo "If --shell is not set, but one command is given, run your command within the chroot jail and exit chroot_package_run automatically."
	echo "Example 3: chroot_package_run --package-path /tmp/pack ls"
	echo ''
	echo "Options:"
	echo "-p, --package-path         The path of the package."
	echo "-s, --shell                The shell you want to enter into."
	echo "-h, --help                 Show this help message."

	exit 1
}

while [ $# -gt 0 ]
do
	case $1 in
		-p | --package-path)
			shift
			package_path=$1
			;;
		-s | --shell)
			shift
			shell_type=$1
			;;
		-h | --help)
			show_help
			;;
		*)
			break
			;;
	esac
	shift
done

if [ -z $package_path ]; then
	echo "Please specify package-path!"
	exit 1
fi

if [ ! -d $package_path ]; then
	echo "Please ensure directory " $package_path " exists!"
	exit 1
fi

user=`whoami`
if [ ! "$user" = "root" ]; then
	echo "chroot_package_run needs the root account!!"
	exit 1
fi

package_path=`readlink -f $package_path`
cd $package_path

# This allows DNS lookups via your system's networking
if [ ! -e etc ]; then
	mkdir etc
fi
cp -L /etc/resolv.conf etc/

common_mountlist=$package_path/common-mountlist
while read item
do
	tmp_fs=`echo $item|cut -d' ' -f1`
	virtual_fs=./$tmp_fs
	mkdir -p $virtual_fs 1>/dev/null 2>/dev/null
	mount --bind $tmp_fs $virtual_fs 1>/dev/null 2>/dev/null
done <$common_mountlist

cmd_chroot=`which chroot`
cmd_rm=`which rm`
cmd_umount=`which umount`
cmd_rmdir=`which rmdir`

if [ -z $cmd_chroot ]; then
	echo "Can't not find chroot! Please add the path of chroot into PATH environment variables!"
	exit 1
fi

if [ -z $cmd_rm ]; then
	echo "Can't not find rm! Please add the path of rm into PATH environment variables!"
	exit 1
fi

if [ -z $cmd_umount ]; then
	echo "Can't not find umount! Please add the path of umount into PATH environment variables!"
	exit 1
fi

if [ -z $cmd_rmdir ]; then
	echo "Can't not find rmdir! Please add the path of rmdir into PATH environment variables!"
	exit 1
fi

sort -u special_files >> special_files.bak
mv -f special_files.bak special_files

#umount chroot dirs
umount_virtual_fs() {
	while read item
	do
		tmp_fs=`echo $item|cut -d' ' -f1`
		virtual_fs=$package_path/$tmp_fs
		if [ -e $virtual_fs ]; then
			$cmd_umount -f $virtual_fs 1>/dev/null 2>/dev/null
			$cmd_rmdir $virtual_fs
		fi
	done <$common_mountlist
}

#remove special files
remove_special_files() {
	if [ -e $package_path/etc/resolv.conf ]; then
		$cmd_rm $package_path/etc/resolv.conf
	fi
	while read line
	do
		item=`echo $line|cut -d' ' -f1`
		if [ -e $package_path/$item ]; then
			unlink $package_path/$item
		fi
	done < $package_path/special_files
}

umount_virtual_fs
remove_special_files

#create hardlink to special files
while read line
do
	item=`echo $line|cut -d' ' -f1`
	if [ -e $package_path/$item -o ! -e $item ]; then
		continue
	fi
	filename=`basename $item`
	filepath=${item%$filename}
	if [ ! -e $package_path/$filepath ]; then
		mkdir -p $package_path/$filepath
	fi
	cd $package_path/$filepath
	ln $item $filename
	if [ ! $? -eq 0 ]; then
		echo "Creating hardlink to special file ("$item") failed."
	fi
done < "${package_path}/special_files"

cd "$package_path"

#import environment varibales
export_env() {
	while read line
	do
		IFS="="     # Set the field separator
		set $line      # Breaks the string into $1, $2, ...
		variable_name=$1
		name_len=${#variable_name}
		name_len=`expr $name_len + 1`
		variable_value=${line:name_len}
		export "$variable_name"="$variable_value"
		IFS=" "
	done < env_list
}
export_env

unset PARROT_ENABLED

if [ ! -z $shell_type ]; then
	$cmd_chroot "$package_path" "$shell_type"
elif [ -z "$1" ]; then
	$cmd_chroot "$package_path" /bin/sh
else
	PACKAGE_CHROOT_PWD="$PWD"
	$cmd_chroot "$package_path" /bin/sh <<EOF
	cd "$PACKAGE_CHROOT_PWD"
	eval "$@"
EOF
fi

#post cleaning process
umount_virtual_fs
remove_special_files
