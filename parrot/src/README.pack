This is a short instruction about how to make use of `env-process.sh` and `parrot_pack`
to generate one package for your experiment and repeat your experiment within your package.
Step 1: Preserve environment variables.
When the execution environment of your program is fixed (this should be done before you
generate the package), preserve environment variables using `env-process.sh`.
	env-process.sh -s bash -p envlist
	Parameters:
	-s, --shell       The type of shell used to do the experiment.
	                  Supported shell types: csh, tcsh, bash, zsh.
	-p, --path        File to write the environment variables and its values.
At the end of step 1, one file named `envlist` will be generated.
Step 2: Run your program under Parrot and using `--name-list` parameter of Parrot to
record the filename list.
	parrot_run --name-list namelist ...
At the end of step 2, one file named `namelist` will be generated.
Step 3: Using `parrot_pack` to generate a package.
	parrot_pack --name-list namelist --env-path envlist --package-path /tmp/package
	Parameters:
    --name-list=<listpath>          The path of the namelist list generated in step 2.
    --env-path=<envpath>            The path of the environment variable file generated in step 1.
    --package-path=<packagepath>    The path of the package.
At the end of step 3, one package with the path of `/tmp/package` will be generated.
Step 4: After you find out a new environment to repeat your experiment, another workstation or
a Virtual Machine, first obtain the package and cctools.
Step 5: Create the mountlist file so that the file access request of your program can be redirected
into the package.
	create-mountlist.sh -p /tmp/package -m mountlist
	Parameters:
	-m, --mountfile   Set the path of the mountlist file.
	-p, --path                   The path of the package.
At the end of step 5, one file named `mountlist` will be generated.
Step 6: Repeat your program within your package.
	parrot_run -m mountlist ...
