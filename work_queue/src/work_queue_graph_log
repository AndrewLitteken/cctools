#!/usr/bin/env cctools_python
# CCTOOLS_PYTHON_VERSION 2.7 2.6

# Copyright (C) 2014- The University of Notre Dame
# This software is distributed under the GNU General Public License.
# See the file COPYING for details.

import sys
import re
import os
import getopt
from subprocess import Popen, PIPE

gnuplot_cmd   = 'gnuplot'
format        = 'png'
extension     = format
resolution    = 1000000      # this many useconds to one log entry. Default is one second.
x_range       = None         # If unspecified, then plot all the valid range.

log_entries   = None
times         = None

unit_labels   = {'s' : 'seconds', 'm' : 'minutes', 'h' : 'hours', 'd' : 'days'}
unit_factors  = {'s' : 1, 'm' : 60, 'h' : 3600, 'd' : 86400}
x_units       = 'm'          # Default is minutes.

def read_fields(file, lines_patience = 10):
  for line in file:
    if line[0] != '#':
      lines_patience = lines_patience - 1
    else:
      return line.strip('#\n\r\t ').split()
    if lines_patience < 1:
      break
  sys.stderr.write("Could not find fields descriptions (a line such as # timestamp workers_....)\n")
  sys.exit(1)

def time_to_resolution(t):
	return (t - (t % resolution)) / resolution

def time_field_p(field):
  return (field == 'timestamp' or re.search('^time_.*$', field))

def read_log_entries(file, fields):
  log_entries = {}
  idxs  = range(0, len(fields))
  pairs = zip(idxs, fields)
  epoch = None
  count_lines = 0

  for line in file:
    count_lines = count_lines + 1
    try:
      numbers = [float(x) for x in line.split()]
      record  = {}


      for (i, field) in pairs:
        if time_field_p(field):
          numbers[i] = time_to_resolution(numbers[i])
        if field == 'timestamp':
          if not epoch:
            epoch = numbers[i]
          numbers[i] = numbers[i] - epoch
        record[field] = numbers[i]

      record['time_transfer'] = record['time_send'] + record['time_receive']
      record['time_master']   = record['time_status_msgs'] + record['time_internal'] + record['time_idle'] + record['time_application']
      record['bytes_transfered'] = record['bytes_sent'] + record['bytes_received']
      log_entries[record['timestamp']] = record

    except ValueError:
      sys.stderr.write('Line %d has an invalid value. Ignoring.\n' % (count_lines, ))
      continue
    except IndexError:
      sys.stderr.write('Line %d has less than %d fields. Aborting.\n' % (count_lines, len(fields)))
      sys.exit(1)

  return log_entries

def sort_time(log_entries):
  times = []
  for k in log_entries.keys():
    times.append(k)
  times.sort()
  return times

def pout(file, str):
  file.write(str)
  file.write('\n')

class WQPlot:
  def __init__(self, ylabel, fields, labels=None, x_units = x_units, range = x_range):
    self.fields      = fields
    self.labels      = labels or self.fields
    self.x_units     = x_units
    self.ylabel      = ylabel
    self.range       = range

  def preamble(self, file):
    self.__preamble_common(file)

  def __preamble_common(self, file):
    pout(file, """
set term %s linewidth 2;
set xlabel '%s';
set ylabel '%s';
set noborder;
set tics nomirror;
set key right top;
  """ % (format, unit_labels[self.x_units], self.ylabel))
    if self.range:
      pout(file, 'set xrange [%s]' % (self.range,))

  def __data_one_time_field(self, file, field):
    time_scale = unit_factors[self.x_units]
    # if a time field, then scale
    mod = time_field_p(field) and time_scale or 1

    for t in times:
      r = log_entries[t]
      try:
        pout(file, '%lf %lf' % (t/time_scale, r[field]/mod))
      except KeyError:
        sys.stderr.write("Field '%s' does not exist in the log\n" % (field,))
        break
    pout(file, 'EOF')

  def plot_line(self, label):
   return "'-' using 1:2 title '%s' with lines" % (label,)

  def write_plot(self, file):
    self.preamble(file)

    plots = [ self.plot_line(label) for label in self.labels ]
    pout(file, 'plot %s;' % (',\\\n'.join(plots),))

    for field in self.fields:
      self.__data_one_time_field(file, field)

  def __plot_internal(self, output, command):
      sys.stdout.write("Generating '%s'.\n" % (output,))
      fout = open(output, 'w')
      gnuplot = Popen(command, stdin = PIPE, stdout = fout)
      self.write_plot(gnuplot.stdin)
      gnuplot.stdin.close()
      gnuplot.wait()

  def plot(self, output):
    try:
      self.__plot_internal(output, command = gnuplot_cmd)
    except IOError:
      sys.stderr.write("Could not generate file %s.\n" % (output,))
      exit(1)
    except OSError:
      sys.stderr.write("Could not execute '%s'. Please try again specifying -c <gnuplot-path>, or -Ttext\n" % (gnuplot_cmd, ))
      exit(1)


class WQPlotLog(WQPlot):
  def preamble(self, file):
    WQPlot.preamble(self, file)
    pout(file, 'set logscale y')
    pout(file, '')

def show_usage():
  print '%s [options] <work-queue-log>\n' % (os.path.basename(sys.argv[0],))
  print '\t-h\t\t\tThis message.'
  print '\t-c <gnuplot-path>\tSpecify the location of the gnuplot executable.'
  print '\t\t\t\tDefault is gnuplot.'
  print '\t-o <prefix-output>\tGenerate prefix-output.{workers,workers-accum,tasks,tasks-accum,time-master,time-workers,transfer,cores}.%s.' % (format,)
  print '\t\t\t\tDefault is <work-queue-log>.'
  print '\t-r <range>\t\tRange of time to plot, in time units (see -u) from'
  print '\t\t\t\tthe start of execution. Of the form: min:max, min:, or :max.'
  print '\t-T <output-format>\tSet output format. Default is png.'
  print '\t\t\t\tIf \'text\', then the gnuplot scripts are written instead of the images.'
  print '\t-u <time-unit>\t\tTime scale to output. One of s,m,h or d, for seconds,'
  print '\t\t\t\tminutes (default), hours or days.'

if __name__ == '__main__':

  try:
    optlist, args = getopt.getopt(sys.argv[1:], 'c:ho:r:T:u:')
  except getopt.GetoptError as e:
    sys.stderr.write(str(e) + '\n')
    show_usage()
    sys.exit(1)

  if len(args) < 1:
    show_usage()
    sys.exit(1)

  logname = args[0]
  prefix  = logname

  for opt, arg in optlist:
    if   opt == '-c':
      gnuplot_cmd = arg
    elif opt == '-o':
      prefix = arg
    elif opt == '-h':
      show_usage()
      sys.exit(0)
    elif opt == '-r':
      x_range = arg
    elif opt == '-T':
      if arg == 'text':
        gnuplot_cmd = 'cat'
        extension   = format + '.gnuplot'
      else:
        format    = arg
        extension = format
    elif opt == '-u':
      if arg in unit_factors:
        x_units = arg
      else:
        sys.stderr.write("Time scale factor '%s' is not valid. Options: s,m,h or d.\n"  % (arg,))
        exit(1)

  try:
    file        = open(logname)
    log_entries = read_log_entries(file, read_fields(file))
    times       = sort_time(log_entries)
    file.close()

    plots = {}
    plots['workers'] = WQPlot(x_units = x_units, ylabel = 'workers', range = x_range,
            fields = ['workers_connected', 'workers_idle', 'workers_busy'],
            labels = ['connected', 'idle', 'busy'])

    plots['workers-accum'] = WQPlot(x_units = x_units, ylabel = 'workers', range = x_range,
            fields = ['workers_joined', 'workers_removed', 'workers_vacated', 'workers_idled_out', 'workers_fast_aborted', 'workers_lost'],
            labels = ['joined', 'removed', 'vacated', 'idled out,', 'fast aborted', 'lost'])

    plots['tasks'] = WQPlot(x_units = x_units, ylabel = 'tasks', range = x_range,
            fields = ['tasks_waiting', 'tasks_on_workers', 'tasks_running'],
            labels = ['waiting', 'on workers', 'running'])

    plots['tasks-accum'] = WQPlot(x_units = x_units, ylabel = 'tasks', range = x_range,
            fields = ['tasks_submitted', 'tasks_dispatched', 'tasks_done', 'tasks_failed', 'tasks_cancelled', 'tasks_exhausted_attempts'],
            labels = ['submitted', 'dispatched', 'done', 'failed', 'cancelled', 'exhausted attempts'])

    plots['time-master'] = WQPlot(x_units = x_units, ylabel = unit_labels[x_units], range = x_range,
        fields = ['time_send', 'time_receive', 'time_transfer', 'time_status_msgs', 'time_internal', 'time_idle', 'time_master'],
        labels = ['send', 'receive', 'send+recv', 'master status msgs', 'master internal', 'master idle', 'msgs+internal+idle'])

    plots['time-workers'] = WQPlot(x_units = x_units, ylabel = unit_labels[x_units], range = x_range,
        fields = ['time_execute', 'time_execute_good', 'time_execute_exhaustion'],
        labels = ['execute', 'execute good', 'execute exhaustion'])

    plots['transfer'] = WQPlot(x_units = x_units, ylabel = 'bytes', range = x_range,
        fields = ['bytes_sent', 'bytes_received', 'bytes_transfered'],
        labels = ['sent', 'received', 'transfered'])

    plots['cores'] = WQPlot(x_units = x_units, ylabel = 'cores', range = x_range,
        fields = ['total_cores', 'committed_cores', 'capacity_cores'],
        labels = ['total', 'committed', 'capacity'])

    for name in plots.keys():
        plots[name].plot(prefix     + '.' + name + '.' + extension)

  except IOError:
    sys.stderr.write("Could not open file %s\n" % (logname,))
    sys.exit(1)
