#!/bin/sh

uname -a

. ./configure.tools

save_arguments $0 $@

major=2
minor=5
micro=3

build_user=`whoami`
build_host=`uname -n`
build_sys=`uname -s | tr \[a-z\] \[A-Z\] | awk -F_ '{print $1}'`
build_cpu=`uname -m | tr \[a-z\] \[A-Z\]`

if [ "${build_cpu}" = unknown ]
then
	build_cpu=`uname -p | tr \[a-z\] \[A-Z\]`
fi

case "$build_cpu" in
	I[0-9]86)
	build_cpu=I386
	;;
	POWER\ MACINTOSH)
	build_cpu=POWERPC
	;;
	SUN4V)
	build_cpu=SPARC
	;;
esac

potential_packages="dttools ftp_lite chirp ftsh"

if [ -d parrot -a $build_sys = LINUX ]
then
	if [ $build_cpu = I386 -o $build_cpu = X86_64 ]
	then
		echo "including parrot, because this system is $build_sys and $build_cpu"
		potential_packages="${potential_packages} parrot"
	else
		echo "skipping parrot, because this cpu is ${build_cpu}, not I386"
	fi
else
	echo "skipping parrot, because this system is ${build_sys}, not LINUX"
fi

potential_packages="${potential_packages} abstractions"

install_path="/usr/local"
globus_path="/usr/local"
krb5_path="/usr"
nest_path="/usr/local"
classad_path="/usr/local"
gcb_path="/usr/local"
readline_path="/usr"
if [ ${build_sys} = DARWIN -o ${build_sys} = FREEBSD ]
then
	fuse_path="/usr/local"
else
	fuse_path="/usr"
fi
egee_path="/opt"
rfio_path="/usr"
dcap_path="/usr"
irods_path="/usr"
hdfs_path="/usr"
zlib_path="/usr"

globus_flavor=gcc32dbg
has_egee=no

ccompiler=gcc
cxxcompiler=g++
ccflags="-D__EXTENSIONS__ -D_LARGEFILE64_SOURCE -D__LARGE64_FILES -Wall -Wno-unknown-pragmas -Wno-deprecated-declarations -fno-exceptions -fPIC"

config_readline_path=auto
config_globus_path=no
config_krb5_path=no
config_nest_path=no
config_classad_path=no
config_gcb_path=no
config_fuse_path=auto
config_egee_path=no
config_rfio_path=no
config_dcap_path=no
config_irods_path=no
config_hdfs_path=no
config_zlib_path=yes

if [ "X${GLOBUS_LOCATION}" != "X" ]
then
	globus_path=${GLOBUS_LOCATION}
fi

IFS=" ="
export IFS

while [ $# -gt 0 ]
do
	case $1 in
		--prefix)
			shift
			install_path=$1
			;;	
		--with-globus-path)
			shift
			globus_path=$1
			config_globus_path=yes
			;;
		--globus-flavor)
			shift
			globus_flavor=$1
			;;
		--with-krb5-path)
			shift
			krb5_path=$1
			config_krb5_path=yes
			;;
		--with-nest-path)
			shift
			nest_path=$1
			config_nest_path=yes
			;;
		--with-classad-path)
			shift
			classad_path=$1
			config_classad_path=yes
			;;
		--with-gcb-path)
			shift
			gcb_path=$1
			config_gcb_path=yes
			;;
		--with-readline-path)
			shift
			readline_path=$1
			config_readline_path=yes
			;;
		--with-fuse-path)
			shift
			fuse_path=$1
			config_fuse_path=yes
			;;
		--with-egee-path)
			shift
			egee_path=$1
			config_egee_path=yes
			;;
		--with-rfio-path)
			shift
			rfio_path=$1
			config_rfio_path=yes
			;;
		--with-dcap-path)
			shift
			dcap_path=$1
			config_dcap_path=yes
			;;
		--with-irods-path)
			shift
			irods_path=$1
			config_irods_path=yes
			;;
		--with-hdfs-path)
			shift
			hdfs_path=$1
			config_hdfs_path=yes
			;;
		--with-zlib-path)
			shift
			zlib_path=$1
			config_zlib_path=yes
			;;
		--with-*-path)
			echo "ignoring unknown package $1"
			shift
			;;
		-h | -help | --h | --help)
			cat <<EOF
Use: configure [options]
Where options are:
  --help
  --prefix             <path>
  --globus-flavor      <flavor>
  --with-PACKAGE-path  <path>

Where PACKAGE may be:
    readline
    egee
    krb5
    gdb
    fuse
    rfio
    dcap
    classad
    nest
    globus
    irods
    hdfs
    zlib
EOF
			exit 1
			;;
		*)
			echo "Unknown argument $1"
			exit 1
			;;
	esac
	shift
done

IFS=" "
export IFS

if [ $build_sys = LINUX ]
then
	ldflags="-dynamic -Xlinker -Bstatic -lstdc++ -static-libgcc"
else
	ldflags=""
fi

rm -f Makefile.config
echo "checking for all the things I know how to build..."
for p in $potential_packages
do
	if [ -d $p ]
	then
		echo "package $p found"
		packages="${packages} $p"
		if [ -d `pwd`/$p/src ]
		then
			internal_ccflags="${internal_ccflags} -I`pwd`/$p/src"
			internal_ldflags="${internal_ldflags} -L`pwd`/$p/src"
		fi
	else
		echo "package $p not found (that's ok)"
	fi
done

require_path ${ccompiler}
require_path ${cxxcompiler}
require_path "install"
require_gnu_make
require_path flex
require_path bison

if [ $config_readline_path != no ] && check_file /usr/lib/libreadline.a
then
	if [ ${readline_path} != /usr ]
	then
		ccflags="${ccflags} -I${readline_path}/include"
		ldflags="${ldflags} -L${readline_path}/lib"
	fi
	
	ccflags="${ccflags} -DHAS_LIBREADLINE"
	ldflags="${ldflags} -lreadline"
	
	# Some, but not all versions of readline require ncurses.
	optional_library ncurses HAS_LIBNCURSES
else
	echo "*** skipping readline..."
fi

if [ $config_egee_path != no ] && check_file "${egee_path}/lcg/include/lcg_util.h"
then
	has_egee=yes
	globus_flavor=gcc32dbgpthr
	fix_globus_install ${egee_path}/globus ${globus_flavor}
	ccflags="${ccflags} -I${egee_path}/globus/include/${globus_flavor} -I${egee_path}/lcg/include -I${egee_path}/edg/include  -I${egee_path}/lcg/include/lfc -I${egee_path}/lcg/include/dpm -DHAS_EGEE -DHAS_GLOBUS_GSS"
	ldflags="${ldflags} -L${egee_path}/globus/lib -L${egee_path}/edg/lib -L${egee_path}/lcg/lib -ldpm -llfc -lgfal -llcg_util -lcgsi_plugin_gsoap_2.6 -lglobus_gss_assist_${globus_flavor} -lglobus_gssapi_gsi_${globus_flavor} -lglobus_gsi_proxy_core_${globus_flavor} -lglobus_gsi_credential_${globus_flavor} -lglobus_gsi_callback_${globus_flavor} -lglobus_oldgaa_${globus_flavor} -lglobus_gsi_sysconfig_${globus_flavor} -lglobus_gsi_cert_utils_${globus_flavor} -lglobus_openssl_${globus_flavor} -lglobus_proxy_ssl_${globus_flavor} -lglobus_openssl_error_${globus_flavor} -lglobus_common_${globus_flavor} -lldap_${globus_flavor} -llber_${globus_flavor} -lsasl -lssl_${globus_flavor} -lcrypto_${globus_flavor} -lltdl_${globus_flavor} -llutil_${globus_flavor} -luuid"
else
	has_egee=no
	if [ $config_egee_path = yes ]
	then
		echo "*** Sorry, I couldn't find EGEE in $egee_path"
		echo "*** Check --with-egee-path and try again."
		exit 1
	else
		echo "*** skipping egee support"
	fi
fi

if [ $config_nest_path != no ] && check_file "${nest_path}/include/nest_speak.h"
then
	ccflags="${ccflags} -I${nest_path}/include -DHAS_NEST"
	ldflags="${ldflags} -L${nest_path}/lib -lnest-client"

	if check_file "${classad_path}/include/classad.h"
	then
		ccflags="${ccflags} -I${classad_path}/include -DHAS_CLASSAD"
		ldflags="${ldflags} -L${classad_path}/lib -lclassad"
	else
		echo "*** Sorry, you can't have NeST without ClassAds."
		echo "*** Consider using the --with-classad-path option."
		exit 1
	fi
else
	if [ $config_nest_path = yes ]
	then
		echo "*** Sorry, I couldn't find Nest in $nest_path"
		echo "*** Check --with-nest-path and try again."
		exit 1
	else
		echo "*** skipping nest support"
	fi
fi

if [ $config_gcb_path != no ] && check_file "${gcb_path}/include/GCB.h"
then
	ccflags="${ccflags} -DHAS_GCB -I${gcb_path}/include"
	ldflags="${ldflags} -Wl,--wrap,socket -Wl,--wrap,bind -Wl,--wrap,listen -Wl,--wrap,connect -Wl,--wrap,accept -Wl,--wrap,select -Wl,--wrap,recv -Wl,--wrap,read -Wl,--wrap,recvfrom -Wl,--wrap,send -Wl,--wrap,sendto -Wl,--wrap,write -Wl,--wrap,close -Wl,--wrap,dup -Wl,--wrap,dup2 -Wl,--wrap,getsockname -Wl,--wrap,getsockaddr -Wl,--wrap,getsockopt -Wl,--wrap,execve -L${gcb_path}/lib -lGCB"
else
	if [ $config_gcb_path = yes ]
	then
		echo "*** Sorry, I couldn't find GCB in $gcb_path"
		echo "*** Check --with-gcb-path and try again."
		exit 1
	else
		echo "*** skipping gcb support"
	fi
fi

if [ $has_egee = yes ]
then
	echo "using egee version of rfio"
else
	if [ $config_rfio_path != no ] && check_file "${rfio_path}/include/rfio_api.h"
	then
		ccflags="${ccflags} -I${rfio_path}/include -DHAS_RFIO"
		ldflags="${ldflags} -L${rfio_path}/lib -ldpm"
	else
		if [ $config_rfio_path = yes ]
		then
			  echo "*** Sorry, I couldn't find RFIO in $rfio_path"
			  echo "*** Check --with-rfio-path and try again."
			  exit 1
		else
			  echo "*** skipping rfio support"
		fi
	fi
fi

if [ $config_dcap_path != no ] && check_file "${dcap_path}/dcap/dcap.h"
then
	ccflags="${ccflags} -I${dcap_path}/dcap -DHAS_DCAP"
	ldflags="${ldflags} -L${dcap_path}/lib -ldcap"
else
	if [ $config_dcap_path = yes ]
	then
		echo "*** Sorry, I couldn't find dcap in ${dcap_path}"
		echo "*** Check --with-dcap-path and try again."
		exit 1
	else
		echo "*** skipping dcap support"
	fi
fi

if [ $has_egee = yes ]
then	
	echo "using egee version of globus"
else
	if [ $config_globus_path != no ] && check_file ${globus_path}/include/${globus_flavor}/globus_common.h
	then
		fix_globus_install ${globus_path} ${globus_flavor}
		ccflags="${ccflags} -I${globus_path}/include/${globus_flavor} -DHAS_GLOBUS_GSS"
		ldflags="${ldflags} -L${globus_path}/lib -lglobus_gss_assist_${globus_flavor} -lglobus_gssapi_gsi_${globus_flavor} -lglobus_gsi_proxy_core_${globus_flavor} -lglobus_gsi_credential_${globus_flavor} -lglobus_gsi_callback_${globus_flavor} -lglobus_oldgaa_${globus_flavor} -lglobus_gsi_sysconfig_${globus_flavor} -lglobus_gsi_cert_utils_${globus_flavor} -lglobus_openssl_${globus_flavor} -lglobus_proxy_ssl_${globus_flavor} -lglobus_openssl_error_${globus_flavor} -lglobus_common_${globus_flavor} -lldap_${globus_flavor} -llber_${globus_flavor} -lsasl -lssl_${globus_flavor} -lcrypto_${globus_flavor} -lltdl_${globus_flavor} -llutil_${globus_flavor}"
	else
		if [ $config_globus_path = yes ]
		then
			echo "*** Sorry, I couldn't find Globus in $globus_path"
			echo "*** Check --with-globus-path and try again."
			exit 1
		else
			echo "*** skipping globus support"
		fi
	fi
fi

if [ $config_irods_path != no ] && check_file "${irods_path}/lib/core/obj/libRodsAPIs.a"
then
	ccflags="${ccflags} -I${irods_path}/lib/core/include -I${irods_path}/lib/api/include -I${irods_path}/lib/md5/include -I${irods_path}/server/core/include -I${irods_path}/server/api/include -I${irods_path}/server/icat/include -I${irods_path}/server/drivers/include -I${irods_path}/server/re/include -DHAS_IRODS"
	ldflags="${ldflags} -L${irods_path}/lib/core/obj -lRodsAPIs"
else
	if [ $config_irods_path = yes ]
	then
		echo "*** Sorry, I couldn't find IRODS in $irods_path"
		echo "*** Check --with-irods-path and try again."
		exit 1
	else
		echo "*** skipping irods support"
	fi
fi

if [ $config_hdfs_path != no ] && check_file "${hdfs_path}/src/c++/libhdfs/hdfs.h"
then
	echo "searching for libjvm.so to work with hadoop:"
	if [ X$JAVA_HOME != X ]
	then
		if find $JAVA_HOME -name libjvm.so > configure.libjvm
		then
			libjvm=`head -1l configure.libjvm`
			echo "found $libjvm"
		else
			echo "*** Sorry, I couldn't find libjvm.so anywhere in your Java installation."
			exit 1
		fi
	else
		echo "*** Please set JAVA_HOME to the Java installation that you use with Hadoop."
		exit 1
	fi

	libhdfs="${hdfs_path}/libhdfs/libhdfs.so"
	if ! check_file "$libhdfs"; then
	    libhdfs="${hdfs_path}/lib/libhdfs.so"
	    if ! check_file "$libhdfs"; then
		echo "*** Sorry, I couldn't find libhdfs.so in $hdfs_path"
		echo "*** Check --with-hdfs-path and try again."
		exit 1
	    fi
	fi
	echo "#define LIBHDFS_PATH \"$libhdfs\"" > parrot/src/pfs_service_hdfs.h
	echo "#define LIBJVM_PATH  \"$libjvm\"" >> parrot/src/pfs_service_hdfs.h

	sed -e "s|^export JAVA_HOME=|export JAVA_HOME=$JAVA_HOME|" \
            -e "s|^export HADOOP_HOME=|export HADOOP_HOME=$hdfs_path|" \
	    < parrot/src/parrot_hdfs.sh > parrot/src/parrot_hdfs
	chmod 755 parrot/src/parrot_hdfs

	ccflags="${ccflags} -I ${hdfs_path}/src/c++/libhdfs -DHAS_HDFS"
	ccflags="${ccflags} -I ${JAVA_HOME}/include -I ${JAVA_HOME}/include/$(echo $build_sys | tr \[A-Z\] \[a-z\])"
else
	if [ $config_hdfs_path = yes ]
	then
		echo "*** Sorry, I couldn't find HDFS in $hdfs_path"
		echo "*** Check --with-hdfs-path and try again."
		exit 1
	else
		echo "*** skipping hdfs support"
	fi
fi

if [ $config_krb5_path != no ] && check_file "${krb5_path}/lib/libkrb5.a" && check_file "${krb5_path}/include/krb5.h"
then
	if [ ${krb5_path} != /usr ]
	then
		ccflags="${ccflags} -I${krb5_path}/include"
		ldflags="${ldflags} -L${krb5_path}/lib"
	fi

	ccflags="${ccflags} -DHAS_KRB5"
	ldflags="${ldflags} -lkrb5"
 
	if check_file "${krb5_path}/lib/libk5crypto.a"
	then
		ldflags="${ldflags} -lk5crypto"
	fi

	if check_file "${krb5_path}/lib/libcrypto.a"
	then
		ldflags="${ldflags} -lcrypto"
	fi

	if check_file "${krb5_path}/lib/libcom_err.a"
	then
		ldflags="${ldflags} -lcom_err"
	fi

	if check_file "${krb5_path}/lib/libkrb5support.a"
	then
		ldflags="${ldflags} -lkrb5support"
	fi

else
	if [ $config_krb5_path = yes ]
	then
		echo "*** Sorry, I couldn't find Kerberos in $krb5_path"
		echo "*** Check --with-krb5-path and try again."
		exit 1
	else
		echo "*** skipping krb5 support"
	fi
fi

if [ $config_fuse_path != no ] && check_file ${fuse_path}/include/fuse.h
then
        if [ ${fuse_path} != /usr ]
        then
                ccflags="${ccflags} -I${fuse_path}/include"
                ldflags="${ldflags} -L${fuse_path}/lib"

                # On Linux, FUSE is often installed with libtool
                # such that the real static library is under .libs

                if [ -f ${fuse_path}/lib/.libs ]
                then
                        ldflags="${ldflags} -L${fuse_path}/lib/.libs"
                fi
        fi
        ccflags="${ccflags} -DHAS_FUSE"
        ldflags="${ldflags} -lfuse"
else
        echo "*** skipping fuse..."
fi

optional_function strsignal /usr/include/string.h HAS_STRSIGNAL
optional_function pread /usr/include/unistd.h HAS_PREAD
optional_function pwrite /usr/include/unistd.h HAS_PWRITE

optional_file /usr/include/sys/statfs.h HAS_SYS_STATFS_H
optional_file /usr/include/sys/statvfs.h HAS_SYS_STATVFS_H
optional_file /usr/include/alloca.h HAS_ALLOCA_H

if [ $build_sys = LINUX ]
then
	ldflags="${ldflags} -Xlinker -Bdynamic -lm -lc"
else
	ldflags="${ldflags} -lm -lc"
fi

linker="gcc"

if [ ${zlib_path} != /usr ]
then
        ldflags="${ldflags} -L${zlib_path}/lib"
        ccflags="${ccflags} -I${zlib_path}/include"
fi

ldflags="${ldflags} -lz"

optional_library resolv HAS_LIBRESOLV
optional_library crypt HAS_LIBCRYPT
optional_library m HAS_LIBM
optional_library nsl HAS_LIBNSL
optional_library socket HAS_LIBSOCKET
optional_library pthread HAS_LIBPTHREAD
optional_library dl HAS_LIBLDL
optional_library iconv HAS_LIBICONV
optional_library rt HAS_LIBRT

if check_path doxygen
then
    doxygen=doxygen
else
    doxygen=true
fi

ccflags="${ccflags} -DINSTALL_PATH=\\\"${install_path}\\\" -g -D_REENTRANT -D_GNU_SOURCE -DBUILD_USER=\\\"$build_user\\\" -DBUILD_HOST=\\\"$build_host\\\" -DCCTOOLS_VERSION_MAJOR=$major -DCCTOOLS_VERSION_MINOR=$minor -DCCTOOLS_VERSION_MICRO=$micro -DCCTOOLS_OPSYS_${build_sys} -DCCTOOLS_CPU_${build_cpu}"

echo "Creating Makefile.config..."

cat <<EOF >>Makefile.config
# Generated at `date` by `whoami`@`uname -n`

CCTOOLS_INSTALL_DIR=${install_path}
CCTOOLS_PACKAGES=${packages}

CCTOOLS_CC=@echo COMPILE \$@; ${ccompiler}
CCTOOLS_BASE_CCFLAGS=${ccflags}
CCTOOLS_INTERNAL_CCFLAGS=${internal_ccflags} \${CCTOOLS_BASE_CCFLAGS}
CCTOOLS_CCFLAGS=-I\${CCTOOLS_INSTALL_DIR}/include \${CCTOOLS_BASE_CCFLAGS}

CCTOOLS_CXX=@echo COMPILE \$@; ${cxxcompiler}
CCTOOLS_BASE_CXXFLAGS=${ccflags}
CCTOOLS_INTERNAL_CXXFLAGS=${internal_ccflags} \${CCTOOLS_BASE_CXXFLAGS}
CCTOOLS_CXXFLAGS=-I\${CCTOOLS_INSTALL_DIR}/include \${CCTOOLS_BASE_CXXFLAGS}

CCTOOLS_LD=@echo LINK \$@; ${linker}
CCTOOLS_BASE_LDFLAGS=${ldflags}
CCTOOLS_INTERNAL_LDFLAGS= ${internal_ldflags} \${CCTOOLS_BASE_LDFLAGS}
CCTOOLS_LDFLAGS=-L\${CCTOOLS_INSTALL_DIR}/lib \${CCTOOLS_BASE_LDFLAGS}

CC=\$(CCTOOLS_CC)
CCFLAGS=\$(CCTOOLS_CCFLAGS)
LD=\$(CCTOOLS_LD)
LDFLAGS=\$(CCTOOLS_LDFLAGS)
CXX=\$(CCTOOLS_CXX)
CXXFLAGS=\$(CCTOOLS_CXXFLAGS)

CCTOOLS_AR=ar
CCTOOLS_YACC=bison
CCTOOLS_LEX=flex
CCTOOLS_DOXYGEN=${doxygen}

EOF

echo ""
echo "To re-configure, type './configure.rerun'"
echo "To build, type '${MAKE}'"
echo "To install, type '${MAKE} install'"
echo ""

exit 0
