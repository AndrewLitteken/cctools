Umbrella is a tool for specifying and materializing comprehensive execution environments, from the hardware all the way up to software and data.  A user simply invokes Umbrella with the desired task, and Umbrella determines the minimum mechanism necessary to run the task, whether it be direct execution, a system container, a local virtual machine, or submission to a cloud or grid environment.  We present the overall design of Umbrella and demonstrate its use to precisely execute a high energy physics application and a ray-tracing application across many platforms using a combination of Parrot, Chroot, Docker, VMware, Condor, and Amazon EC2.

Here is the specification JSON file for a Ray-Tracing application:
	
	{
		"hardware": {
			"arch": "x86_64",
			"cores": "2",
			"memory": "2GB",
			"disk": "10GB"
		},
		"kernel" : {
			"name": "linux",
			"version": "2.6.18"
		},
		"os": {
			"name": "Redhat",
			"version": "5.10"
		},
		"software": {
			"povray-redhat5-x86_64": {
				"mountpoint": "/software/povray-x86_64-redhat5",
				"action": "unpack"
			}
		},
		"data": {
		},
		"environ": {
			"FAKEPWD": "/tmp/test"
		}
	}

A specification includes 6 parts: hardware, kernel, os, software, data, and environ.

`hardware` Section (Required):

`arch` (Required): the hardware architecture the application needs to run on. Options: x86_64, i386, i686. Current support options: x86_64

`cores` (Optional): the number of cores the applications needs. Options: 1, 2, 3, 4, ...

`memory` (Optional): the memory space the application needs. Options: 1GB, 2GB, ...

`disk` (Optional): the disk space the application needs. Options: 1GB, 2GB, ...

`kernel` Section (Required):

`name` (Required): the kernel type the application requires. Options: linux, windows. Current support options: linux

`version` (Required): the kernel version. You can specify this attribute to a single value like `2.6.18` or a range like >=2.6.18 or a range like [2.6.18, 2.6.32].

`os` Section (Required):

`name` (Required): the OS name. Options: redhat, centos, arch, .... 

`version` (Required): the OS version which includes two parts: the main version number and the minor version number. Exmaples: 5.10, 6.5. 

`software` Section (Optional):

Each software dependency has a name, which corresponds to the name included in packages.json (which will be explained in the following part).

`mountpoint` (Required): the mountpoint of the software.

`action` (Required): the action on the downloaded software dependencies. Options: none, unpack. `none` leaves the downloaded dedendency as it is. `unpack` uncompresses the depedency.

`data` Section (Optional):

`mountpoint` (Required): the mountpoint of the data dependency.

`action` (Required): the action on the downloaded data dependencies. Options: none, unpack. `none` leaves the downloaded dedendency as it is. `unpack` uncompresses the dependency.

`environ` Section (Optional):

Each item is a key-value pair. For example, "HOME": "/home/hmeng", which sets the HOME environment variable used by the sandbox to execute the applicition.

By default, metadata of all the software, data and OS dependencies is stored in http://ccl.cse.nd.edu/software/umbrella/database/packages.json. You can download this file using `wget` utility to check the currently supported dependencies.

Here is an example of packages.json, which contains two dependencies. 

	{
	    "cctools-centos6-x86_64": {
	        "source": [
	            "https://www3.nd.edu/~ccl/research/data/hep-case-study/cctools-centos6-x86_64.tar.gz"
	        ],
	        "checksum": "1eb75182f0aa577c68c4884a12d922b5",
	        "size": "22MB"
	    },
	    "cctools-arch-x86_64": {
	        "source": [
	            "https://www3.nd.edu/~ccl/research/data/hep-case-study/cctools-arch-x86_64.tar.gz"
	        ],
	        "checksum": "be80fa184341e565803cae385e28d687",
	        "size": "7.1MB"
	    }
	}

Each dependency includes three attributes: source, checksum, size.

`source`: a list of storage location of the dependency, which includes one or more resource url. Each url can be a local file path like "file:///etc/hosts", or a https/http urlas shown in the example.

`checksum`: the checksum of the dependencies. Currently Umbrella only supports md5 checksum.

`size`: the size of the compressed version of each dependencies.

If you want to customize your own packages.json, follow the requirement and then tell umbrella using `--packages` option to use your own pacakges information.

In the application specification JSON file, you also can add `source`, `checksum`, and `size` attributes to the dependencies in the software and data section which you want to customize. Be sure to follow the semantics of `source`, `checksum`, and `size` attributes.

