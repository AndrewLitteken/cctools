#!/bin/sh

if [ $# -ne 1 ]
then
	echo "use: $0: <config-file>"
	exit 1
fi

configFile=$1

echo -n "Checking for aws command in PATH..."
if which aws >/dev/null 2>&1
then
	echo "ok"
else
	echo "failed"
	echo "$0: The \"aws\" command must be in your path to use this script."
	exit 1
fi

echo -n "Checking for aws configuration..."
if [ -f ~/.aws/config ]
then
	echo "ok"
else
	echo "failed"
	echo "$0 You must run \"aws configure\" before using this script."
	exit 1
fi

echo -n "Checking for correct credentials..."
if aws ec2 describe-instances > /dev/null 2>&1
then
	echo "ok"
else
	echo "failed"
	echo "$0: Your Amazon credentials are not set up correctly. Try \"aws ec2 describe-instances\" to troubleshoot."
	exit 1
fi

CIDR_BLOCK=10.0.0.0/16
UUID="$(uuidgen)"
KEYPAIR_NAME=kp.${UUID}
SECURITY_GROUP_NAME=sg.${UUID}

#echo "Creating virtual private cluster..."
#VPC=`aws ec2 create-vpc --cidr-block $CIDR_BLOCK --output text | cut -f 7`

#echo "Creating internet gateway..."
#GATEWAY=`aws ec2 create-internet-gateway --output text | cut -f 2`

#echo "Attaching internet gateway..."
#aws ec2 attach-internet-gateway --internet-gateway-id $GATEWAY --vpc-id $VPC

#echo "Creating route table..."
#ROUTE_TABLE=`aws ec2 create-route-table --vpc-id $VPC --output text | grep ROUTETABLE | cut -f 2`

#echo "Creating route..."
#aws ec2 create-route --route-table-id $ROUTE_TABLE --gateway-id $GATEWAY --destination-cidr-block 0.0.0.0/0

#echo "Creating subnet..."
#SUBNET=`aws ec2 create-subnet --cidr-block $CIDR_BLOCK --vpc-id $VPC --output text | cut -f 9`
#aws ec2 modify-subnet-attribute --subnet-id $SUBNET --map-public-ip-on-launch

echo "Setting up security group $SECURITY_GROUP_NAME..."
SECURITY_GROUP=`aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "$SECURITY_GROUP_NAME" --output text`
# Allow for ssh incoming traffic
aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP --port 22 --cidr 0.0.0.0/0 --protocol tcp
# Allow for makeflow / work queue / catalog traffic
#aws ec2 authorize-security-group-egress --group-id $SECURITY_GROUP --port 1024-10000 --cidr 0.0.0.0/0 --protocol all

echo "Creating keypair $KEYPAIR_NAME..."
# Remove junk from around keypair that confuses ssh.
aws ec2 create-key-pair --key-name $KEYPAIR_NAME --output text | sed 's/^.*\t-----/-----/' | sed 's/KEY-----.*$/KEY-----/'i > $KEYPAIR_NAME.pem

# Permissions must be just so for ssh to be happy.
chmod 600 $KEYPAIR_NAME.pem

echo "Creating $configFile with all the details..."

cat > $configFile <<EOF
{
"security_group_id" : "$SECURITY_GROUP",
"security_group_name" : "$SECURITY_GROUP_NAME",
"keypair_name" : "$KEYPAIR_NAME",
"instance_type" : "m3.medium",
"ami" : "ami-a4c7edb2"
}
EOF

echo "Done!"
